swagger: '2.0'
info:
  title: Issue Tracker API
  description: Swagger page form for all methods in the Issue Tracker API
  version: v1
host: asw-api.herokuapp.com
schemes:
  - https
securityDefinitions:
  APIKeyHeader:
    type: apiKey
    in: header
    name: Authorization
paths:
  /v1/:
    get:
      operationId: list
      tags:
        - v1
      security:
        - APIKeyHeader: []
      responses:
        '200':
          description: Base URL Page. This method shows a view whit Users and Issues.
  /v1/issues/:
    get:
      operationId: issues_list
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: integer
          name: limit
          description: Number of results to return per page.
          in: query
          required: false
        - type: integer
          name: offset
          description: The initial index from which to return the results.
          in: query
          required: false
        - type: string
          name: priority
          description: string of priority to sort by.
          in: query
        - type: string
          name: status
          description: string of status to sort by.
          in: query
        - type: string
          name: assignee
          description: string of assignee to sort by.
          in: query
        - type: string
          name: kind
          description: string of kind to sort by.
          in: query
      responses:
        '200':
          description: GET method for all issues.
    post:
      operationId: issues_create
      tags:
        - v1
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      parameters:
        - name: data
          schema:
            type: object
            properties:
              kind:
                enum:
                  - Bug
                  - Funcionality
                  - Proposal
                  - Task
                type: string
                description: Issue kind.
              priority:
                enum:
                  - Blocking
                  - Minor
                  - Major
                description: Issue priority.
              assignee:
                type: string
                description: User issue assignee.
              title:
                type: string
                description: Issue title.
              status:
                enum:
                  - New
                  - Open
                  - Closed
                type: string
                description: Issue status.
            required:
              - title
              - kind
              - priority
          in: body
      responses:
        '201':
          description: POST method for an Issue.
        '400':
          description: Invalid Issue.
  '/v1/issues/{id}/':
    get:
      operationId: issues_read
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: integer
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
      responses:
        '200':
          description: GET method for an specific issue.
        '404':
          description: Issue not found.
    put:
      operationId: issues_update
      tags:
        - v1
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      parameters:
        - type: integer
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
        - name: data
          schema:
            type: object
            properties:
              kind:
                type: string
                description: Issue kind.
              priority:
                type: string
                description: Issue priority.
              assignee:
                type: string
                description: User issue assignee.
              title:
                type: string
                description: Issue title.
              votes:
                type: integer
                description: Issue votes (it is irrelevant). Votes are stored on the db.
              status:
                type: string
                description: Issue status.
            required:
              - title
              - kind
              - priority
          in: body
      responses:
        '200':
          description: PUT method to update an specific issue.
        '404':
          description: Issue not found.
    delete:
      operationId: issues_delete
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: integer
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
      responses:
        '204':
          description: DELETE method for an specific issue.
        '403':
          description: The user has not access to delete the issue.
        '404':
          description: Issue not found.
  '/v1/issues/{id}/comments/':
    get:
      operationId: issues_comments_list
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: string
          name: id
          description: ID of the comments issue.
          in: path
          required: true
        - type: integer
          name: limit
          description: Number of results to return per page.
          in: query
          required: false
        - type: integer
          name: offset
          description: The initial index from which to return the results.
          in: query
          required: false
      responses:
        '200':
          description: GET method for all comments on a issue.
        '404':
          description: Issue not found.
    post:
      operationId: issues_comments_create
      tags:
        - v1
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      parameters:
        - type: string
          name: id
          description: ID of the comments issue.
          in: path
          required: true
        - name: data
          schema:
            type: object
            properties:
              comment:
                type: string
                description: Data of creation or last editing.
            required:
              - comment
          in: body
      responses:
        '201':
          description: POST method for create.
        '404':
          description: Issue not found.
  '/v1/issues/{id}/attachments/':
    get:
      operationId: issues_attachments_list
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: string
          name: id
          description: ID of the attachment issue.
          in: path
          required: true
        - type: integer
          name: limit
          description: Number of results to return per page.
          in: query
          required: false
        - type: integer
          name: offset
          description: The initial index from which to return the results.
          in: query
          required: false
      responses:
        '200':
          description: GET method for all attachments on a issue.
        '404':
          description: Issue not found.
    post:
      operationId: issues_attachments_create
      tags:
        - v1
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - type: string
          name: id
          description: ID of the attachment issue.
          in: path
          required: true
        - name: file
          in: formData
          description: The uploaded file data
          required: true
          type: file
      responses:
        '201':
          description: POST method for update.
        '404':
          description: Issue not found.
  '/v1/issues/{id}/vote/':
    post:
      operationId: issues_vote_create
      tags:
        - v1
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      parameters:
        - type: string
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
      responses:
        '201':
          description: POST method for vote an issue.
        '208':
          description: Issue already voted.
        '404':
          description: Issue not found.
  '/v1/issues/{id}/unvote/':
    delete:
      operationId: issues_vote_delete
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: integer
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
      responses:
        '204':
          description: DELETE method for unvote an issue.
        '208':
          description: Issue already unvoted.
        '404':
          description: Issue not found.
  '/v1/issues/{id}/votes/':
    get:
      operationId: issue_votes_get
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: integer
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
        - type: integer
          name: limit
          description: Number of results to return per page.
          in: query
          required: false
        - type: integer
          name: offset
          description: The initial index from which to return the results.
          in: query
          required: false
      responses:
        '200':
          description: GET method for all votes of an specific issue.
        '404':
          description: Issue not found.
  '/v1/issues/{issue_id}/comments/{id}':
    get:
      operationId: issues_comments_read
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: string
          name: issue_id
          description: Issue ID of the comment.
          in: path
          required: true
        - type: integer
          name: id
          description: A unique integer value identifying this comments.
          in: path
          required: true
      responses:
        '200':
          description: GET method for an specific comment on an issue.
        '404':
          description: Issue or Comment not found.
    put:
      operationId: issues_comments_update
      tags:
        - v1
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      parameters:
        - type: string
          name: issue_id
          description: ID of the comments issue.
          in: path
          required: true
        - type: integer
          name: id
          description: A unique integer value identifying this comments.
          in: path
          required: true
        - name: data
          schema:
            type: object
            properties:
              comment:
                type: string
                description: Data of creation or last editing.
            required:
              - comment
          in: body
      responses:
        '200':
          description: PUT method to update an specific issue comment.
        '403':
          description: The issue has not access to update this comment.
        '404':
          description: Issue or Comment not found.
    delete:
      operationId: issues_comments_delete
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: string
          name: issue_id
          description: Issue ID of the comment.
          in: path
          required: true
        - type: integer
          name: id
          description: A unique integer value identifying this comments.
          in: path
          required: true
      responses:
        '204':
          description: DELETE comment method.
        '403':
          description: The issue has not access to update this comment.
        '404':
          description: Issue or Comment not found.
  '/v1/issues/{issue_id}/attachments/{id}':
    get:
      operationId: issues_attachments_read
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: string
          name: issue_id
          description: Issue ID of the attachment.
          in: path
          required: true
        - type: integer
          name: id
          description: A unique integer value identifying this attachment.
          in: path
          required: true
      responses:
        '200':
          description: GET method for an specific attachment on an issue.
        '404':
          description: Issue or Attachment not found.
    delete:
      operationId: issues_attachment_delete
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: string
          name: issue_id
          description: Issue ID of the attachment.
          in: path
          required: true
        - type: integer
          name: id
          description: A unique integer value identifying this attachment.
          in: path
          required: true
      responses:
        '204':
          description: DELETE attachment method.
        '403':
          description: The issue has not access to delete this attachment.
        '404':
          description: Issue or Attachment not found.
  /v1/users/:
    get:
      operationId: users_list
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: integer
          name: limit
          description: Number of results to return per page.
          in: query
          required: false
        - type: integer
          name: offset
          description: The initial index from which to return the results.
          in: query
          required: false
      responses:
        '200':
          description: GET method for all users.
  '/v1/users/{username}':
    get:
      operationId: users_read
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: string
          name: username
          description: User name of an specific User.
          in: path
          required: true
      responses:
        '200':
          description: GET method for an specific User.
        '404':
          description: User not found.
  '/v1/issues/{id}/watch':
    post:
      operationId: issues_watch_create
      tags:
        - v1
      security:
        - APIKeyHeader: []
      consumes:
        - application/json
      parameters:
        - type: string
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
      responses:
        '201':
          description: POST method for watch an issue.
        '208':
          description: Issue already watched.
        '404':
          description: Issue not found.
  '/v1/issues/{id}/unwatch':
    delete:
      operationId: issues_watch_delete
      tags:
        - v1
      security:
        - APIKeyHeader: []
      parameters:
        - type: integer
          name: id
          description: A unique integer value identifying this issues.
          in: path
          required: true
      responses:
        '204':
          description: DELETE method for unwatch an issue.
        '208':
          description: Issue already unwatched.
        '404':
          description: Issue not found.
  /v1/user/watches/:
    get:
      operationId: user_watches_list
      tags:
        - v1
      security:
        - APIKeyHeader: []
      responses:
        '200':
          description: GET method for all watches of the current user.
